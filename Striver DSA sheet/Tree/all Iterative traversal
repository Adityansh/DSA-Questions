//INORDER ITERATIVE
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<Integer>();
        Stack<TreeNode> st = new Stack<>();

        TreeNode node = root;
        while(true) {
            if(node != null) {
                st.push(node);
                node = node.left;
            }

            else {
                if(st.isEmpty()) {
                    break;
                }
                node = st.pop();
                ans.add(node.val);
                node = node.right;
            }
        }
        return ans;
}
}

//PREORDER ITERATIVE
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<>();
        Stack<TreeNode> st = new Stack<>();

        if(root == null) return ans;
        st.push(root);

        while(!st.isEmpty()) {
            TreeNode node = st.pop();
            ans.add(node.val);

            if(node.right != null) {
                st.push(node.right);
            }

            if(node.left != null) {
                st.push(node.left);
            }
        }
        return ans;
}
}

//POSTORDER ITERATIVE
Class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> ans = new ArrayList<Integer>();
        Stack<TreeNode> st1 = new Stack<>();
        Stack<TreeNode> st2 = new Stack<>();

        if(root == null) return ans;
        st1.push(root);
        
        while(!st1.isEmpty()) {
            TreeNode node = st1.pop();
            st2.push(node);
            if(node.left != null) {
                st1.push(node.left);
            }
            if(node.right != null) {
                st1.push(node.right);
            }
        }

        while(!st2.isEmpty()) {
            ans.add(st2.pop().val);
        }
        return ans;
}
}