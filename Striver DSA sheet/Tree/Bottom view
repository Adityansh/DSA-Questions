 public class tuple {
        Node node;
        int ver;
        
        public tuple(Node node, int ver) {
            this.node = node;
            this.ver = ver;
        }
    }
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        // Code here
        TreeMap<Integer, Integer> map = new TreeMap<>();
        Queue<tuple> q = new LinkedList<>();
        if(root!=null) {
            q.add(new tuple(root,0));
        }
        while(!q.isEmpty()) {
            tuple t = q.remove();
            Node node = t.node;
            int ver = t.ver;
            
            map.put(ver,node.data);
            
            if(node.left!=null) {
                q.add(new tuple(node.left,ver-1));
            }
            
            if(node.right != null) {
                q.add(new tuple(node.right, ver+1));
            }
            
        }
        ArrayList<Integer> ans = new ArrayList<>();
        for(int val: map.values()) {
            ans.add(val);
        }
        
        return ans;
    }