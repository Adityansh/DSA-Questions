PROBLEM LINK = https://practice.geeksforgeeks.org/problems/longest-k-unique-characters-substring0853/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

======================SLIDING WINDOW===================

class Solution {
public int longestkSubstr(String s, int k) {
// code here
HashMap<Character, Integer> map = new HashMap<>();
int ans = -1;
int i = 0;
int j = 0;
while(j<s.length()) {
map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0) + 1);
if(map.size() < k) {
j++;
}
else if(map.size() == k) {
ans = Math.max(ans, j-i+1);
j++;
}
else if(map.size() > k) {
while(map.size() > k) {
map.put(s.charAt(i), map.get(s.charAt(i)) - 1);
if(map.get(s.charAt(i)) == 0) {
map.remove(s.charAt(i));
}
i++;
}
j++;
}
}
return ans;
}
}

======================BRUTE FORCE====================

class Solution {
public int longestkSubstr(String s, int k) {
// code here
HashMap<Character, Integer> map = new HashMap<>();
int ans = -1;
for(int i=0; i<s.length(); i++) {
for(int j=i; j<s.length(); j++) {
map.put(s.charAt(j), map.getOrDefault(s.charAt(j), 0) + 1);

                if(map.size() == k)
                    ans = Math.max(ans, j-i+1);

                if(map.size() > k)
                    break;
            }
            map.clear();
        }
        return ans;
    }

}
