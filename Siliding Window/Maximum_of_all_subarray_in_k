PROBLEM LINK = https://leetcode.com/problems/sliding-window-maximum/submissions/882937641/

=======================SLIDING WINDOW========================

public class Maximum_of_all_subarray_in_k {
    class Solution {
        public int[] maxSlidingWindow(int[] nums, int k) {
            int[] ans = new int[nums.length - k + 1];
            ArrayList<Integer> list = new ArrayList<>();
            int i = 0;
            int j = 0;
            while (j < nums.length) {
                while (list.size() != 0 && list.get(list.size() - 1) < nums[j]) {
                    list.remove(list.size() - 1);
                }
                list.add(nums[j]);

                if (j - i + 1 < k) {
                    j++;
                } else if (j - i + 1 == k) {
                    ans[i] = list.get(0);
                    if (nums[i] == list.get(0)) {
                        list.remove(0);
                    }
                    i++;
                    j++;
                }
            }

            return ans;
        }
    }
}

=====================BRUTE FORCE============================

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int max = Integer.MIN_VALUE;
        int[] ans = new int[nums.length - k + 1];
        for(int i=0; i<nums.length - k + 1; i++) {
            for(int j=i; j<i+k; j++) {
                max = Math.max(max, nums[j]);
            }
            ans[i] = max;
            max = Integer.MIN_VALUE;
        }
        return ans;
    }
}


